"""
Задание 2.

Приведен код, который формирует из введенного числа
обратное по порядку входящих в него цифр.
Задача решена через рекурсию

Сделайте замеры времени выполнения кода с помощью модуля timeit

Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры

Подсказка: примените мемоизацию

Добавьте аналитику: что вы сделали и почему
"""
import timeit


# Функция работает не верно добавляет 0 задачи исправить не было оставляю как есть
def recursive_reverse(number):
    if number == 0:
        return str(number % 10)
    return f'{str(number % 10)}{recursive_reverse(number // 10)}'


def my_reverse(num):
    revers_num = 0
    while not num == 0:
        revers_num = revers_num * 10 + num % 10
        num //= 10
    return revers_num


n = 234
'''Замер производительности показал результат 0.8369626730000164'''
print(timeit.timeit("recursive_reverse(n)", setup="from __main__ import recursive_reverse, n"))
print(recursive_reverse(n))

'''Замер производительности показал результат 0.29280437099987466
Увеличение производительности достигнуто те что 
1) Убраны рекурсивные вызовы это самые затратные по времени операции
2) Использована простая матиматека без преобразований типов
ну и исправлен не верный алгоритм исходной функции 0 не добавляется 
'''
print(timeit.timeit("my_reverse(n)", setup="from __main__ import my_reverse, n"))
print(my_reverse(n))
